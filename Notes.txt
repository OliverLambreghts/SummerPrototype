Todo:
- Player movement
- Level generation
- HUD
- Think about mechanics
- Lives
- Sound
- Camera
- Enemies
- Bosses
- Loot
- Map
- Collision with walls
- Collision with obstacles
- Shop met random items uit de txt files
- Economy: enemies moeten geld droppen

- Let's start off with movement. Just make a simple movementcomponent which has functionality to move a gameobject in the level.

- We'll call this class the PlayerMovementComponent. It holds a Point2f member var. The player should move through this component. So if the player pushes an arrow key for example, this component's direction should change to the direction corresponding with that key. In the component's update method, the direction should first be checked and based on that the position should be modified. If no keys are pressed the position shouldn't be modified.

- The SpriteRenderComponent should also change the sprite of the player to a different row whenever a different key is pressed. When no keys are pressed, the player should be put in an idle texture of the last active row which is the first col of that row.

- To generate the world randomly, I will use the maze generation algorithm I used for my maze generation program. Each node in this maze represents a room. Each node has 4 node pointers. Through this algorithm each node receives a connection to one or more other nodes until a path is formed from the first node to the last. There is only 1 possible path from the first node to the last.

- World gameobject components:
	-> MazeComponent: Bevat alle rooms in een 2D array, een 	stack van Room pointers, een bool voor het genereren te 	stoppen en een pointer naar de huidige room.

- Vandaag wil ik eerst regelen dat de world generation gebeurt in de constructor van de maze component. Hier ga ik nog een aparte method voor aanmaken zodat ik de non-blocking versie ook nog kan callen als ik wil. Hierna wil ik een map toevoegen als je op M drukt. Deze toont de lay-out van de wereld en de kamers die je al bezocht hebt. Om de map uit te breiden moet je nieuwe kamers ontdekken.

--- ENEMIES W/ PROTOTYPE ---
5/07:
- Vandaag ga ik experimenteren met random enemies te spawnen in normal rooms. Elke normal room kan 1-4 spawners hebben. Elke spawner spawned 1x een enemy vanaf dat de player de room binnenkomt.

- Aan een Spawner geef je een GameObject mee van een bepaalde enemy. Deze GameObject MOET een bepaalde EnemyComponent hebben, anders kan de Spawner niet werken.

- De Clone method van een EnemyComponent returned een volledig GameObject waar alle nodige components al inzitten voor een complete enemy van dat type.

- De Spawn method van de Spawner called de Clone method van zijn interne prototype.

- Welke components heeft een enemy nodig?
	-> EnemyComponent (bevat data voor de andere comps)
	-> SpriteRenderComponent (rendered de enemy)
	-> EnemyMovementComponent (Zorgt voor AI movement)
	-> CollisionComponent (Checked voor collision tussen enemy 					en player en omgeving)
	-> HealthComponent (update de health v/d enemy)
	-> CombatComponent (handled de attacks v/d enemy tov de 							player)

- In het world GameObject een EnemyManagerComponent steken die voor elke room een random hoeveelheid spawners aanmaakt. Deze checked ook of de player een nieuwe room binnengaat, zo ja worden de spawners van die room geactiveerd. Deze comp houdt dus alle spawners bij voor elke room.

- In deze EnemyManagerComponent zit ook een pCurrentRoom. Hiervan wordt gechecked of deze nog currently active is via zijn bool. Als dit niet zo is, betekent dit dat de player van room veranderd is. In dat geval wordt gechecked of de spawners al gespawned hebben.

- Hierin mss een AddSpawner method toevoegen die een bepaalde spawner toevoegt aan een specifieke room?

- Of deze comp alleen laten werken met de current room? Telkens als er een nieuwe current room is en dus de player van room verandert, dan wordt de nieuwe room toegevoegd aan een map waarvan de keys room pointers zijn en de value is dan een vector van spawners?

- Als de player uit een room gaat, moeten de enemies die bij die room horen gedespawned worden. Dus als de player uit een room gaat, moeten die enemies op inactive gezet worden. Deze inactive flag bepaalt of de enemies gerendered en geupdate moeten worden.

- Het volgende dat ik wil doen is een object achteraan container van gameobjects zetten in de huidige scene zodat de map boven de rest gerendered wordt.

- De map moet eigenlijk achteraan de object container geplaatst worden telkens als de player een nieuwe room binnengaat.
----------------------------
7/07:
- Het volgende dat gedaan moet worden, is dat als de player een room binnengaat, dat de enemies binnen die room op de player aflopen obv hun speed.

- Hun bewegingsgedrag richting de player wordt bepaald door hun MovementComponent.

- Collision wordt bepaald in een aparte CollisionComponent dus dit niet in hun MovementComponent steken!

- De enemies hebben dus de positie van de player nodig als target om naartoe te bewegen.

- Het volgende is denk ik de player en de enemies elks een HealthComponent geven. Daarna ze een CombatComponent geven.

- Als een bepaalde attack key van de player ingedrukt wordt, dan voert de player een attack uit via zijn CombatComponent. Deze CombatComponent gaat de sprite van de player dan tijdelijk veranderen naar een attacking sprite.

- De CombatComponent moet ook checken of er enemies in de range van de player staan. Dus obv de huidige richting van de player moet er gechecked worden of er enemies voor de player staan in een bepaalde range. Als dit het geval is en de player attacked, dan moet de enemy die het dichtst bij de player staat aangevallen worden.

- De CombatComponent moet rechtstreeks kunnen communiceren met het eventuele wapen dat de player vastheeft zodat dit de attackdamage, speed en range aanpast.

- Er moet gechecked worden of het wapen dat de player vastheeft een ranged wapen is of een melee wapen is. Op basis hiervan moet een bijbehorende method gecalled worden die met dat type wapen werkt.
----------------------------
10/07:

- Het eerste dat ik wil doen vandaag is de enemy die het laagste staat in de wereld moet bovenaan gerendered worden enzovoort. Anders klopt de rendervolgorde niet in-game.

- De enemies in de huidige actieve room sorteren volgens hun y waarde en ze zo in de huidige scene een per een achteraan de obj vector zetten.

- Nu wil ik de combat tussen de enemies toevoegen. Om dit te doen moet ik de enemies en de player elks een eigen HealthComponent geven. Ook, ga ik de player een inventory moeten geven en ga ik weapons moeten toevoegen. Ik ga beginnen met de HealthComponent.

- De HealthComponent houdt de hoeveelheid health van het gameobject bij, heeft de functionaliteit om health af te trekken en toe te voegen. De player heeft een PlayerHealthComponent. Deze gaat het het spel resetten als de player volledig dood is. Enemies hebben een EnemyHealthComponent. Deze gaat de enemy uit de scene verwijderen als diens health op is.

- Denk nog maar eerst wat na over wat er moet gebeuren als de player sterft. Focus u eerst op het killen van enemies en de combat system en inventory en items.

- Je geeft de player een InventoryComponent waar alle items effectief in worden opgeslagen. Een apart HUD gameobject heeft een HUDRenderComponent die de inventory data uit het player gameobject haalt en dat gebruikt om de inventory te renderen als deel van de HUD.

- Als de player op spatie drukt wordt het huidig geselecteerde item geactiveerd. Als dat een wapen is, wordt dat wapen's execute method gecalled die de dichtstbijzijnde enemy gaat zoeken binnen een bepaalde radius en op die enemy een attack gaat uitvoeren op basis van de stats en eventuele ability van het wapen.

- We zullen beginnen met items. Stel uw item system op zodanig dat je op een simpele manier nieuwe items kan toevoegen. Je gaat heel veel randomized wapens willen die je makkelijk toevoegt. 

- We hebben een base Item class nodig. 

- Typed object gaat niet voor items want items zijn geen types en elk item heeft unieke stats en een eventuele unieke ability.

class WeaponQuality
{
public:
	WeaponQuality(std::string name, Color4f color, float 
		damageMltplr, float cooldownMltplr)
private:
	std::string m_Name;
	Color4f m_Color;
	float m_DamageMultiplier, m_CooldownMultiplier;
}

class MeleeKey final : public Item
{
public:
	MeleeKey(std::string name, int damage, float cooldown,
		BaseProc* proc, WeaponQuality& quality);

	virtual void OnUse() override;
private:
	std::string m_Name;
	int m_Damage;
	float m_Cooldown;
	BaseProc* m_pProc;
	WeaponQuality& m_WeaponQuality;
}

int main
{
	WeaponQuality epic{"Epic", Color4f{1.f, 0.f, 0.f, 1.f},
	1.01f, 0.9f};
	// Chance on hit: does dot fire dmg
	auto fireProc = new FireProc{};
	// Chance on hit: critical strike
	auto critProc = new CritProc{};
	MeleeKey keyOfFire{"Key of Fire", 10, 0.5f, fireProc,
	epic};
	MeleeKey keyOfMight{"Key of Might", 12, 0.9f, critProc,
	epic};
}

- Nu alles implementeren. Ik geef het world gameobject een ItemManagerComponent. Deze gaat in treasure rooms een item spawnen. Die checked eerst of de current room een treasure room is. Zo ja, dan maakt die een random item aan (meleekey, rangedkey, consumable) met een random naam en bijbehorende stats (deze haalt die uit de bijbehorende text file met namen voor items).

- Bv. als de huidige room een treasure room is:

SpawnRandomItem()
{
	ItemType type = static_cast<ItemType>(rand()% 3);
	std::ifstream file;

	switch(type)
	{
		case ItemType::MeleeKey:
		file.open("../ItemData/MeleeList.txt");
		std::string line{};
		std::vector<std::string> lines;
		while(!file.eof())
		{
			std::getline(file, line);
			lines.push_back(line);
		}

		std::random_shuffle(lines.begin(), lines.end());
		const auto weapon = lines.front();
		std::vector<std::string> weaponData;
		ParseData(weapon, weaponData);
		auto meleeKey = new MeleeKeyComponent{weaponData		[0],
		weaponData[1], weaponData[2], weaponData[3],
		weaponData[4]};
		m_Items[m_pCurrentRoom] = meleeKey->Clone();
	break;
		case ItemType::RangedKey:

	break;
		case ItemType::Consumable:

	break;
	}
}

- Welke components heeft een melee key nodig?
	-> SpriteRenderComponent
	-> MeleeKeyComponent
	-> ActivityComponent

- De Item generation moet pas gebeuren als de volledige maze gegenerate is.

TODO
- Enemy render bug fiksen. DONE

16/07:
- Ik moet verderwerken aan de itemsystem en een inventory toevoegen voor de player.

- Eerst inventory toevoegen zodat je echt al items kan toevoegen zodat je de items correct maakt zodat je ze effectief kan toevoegen aan de inventory.

- Als je dicht bij een item staat, moet je op een key drukken om die item op te kunnen pakken.

- Bv je staat over een meleekey, je drukt op E en die item wordt toegevoegd aan je inventory.

- Als je op E drukt, wordt er een PickUpItemCommand geëxecute. Deze gaat checken of er een item in de hitbox van de player ligt. Zo ja, wordt deze gedeactiveerd en toegevoegd aan de inventory.

- Ik moet een manier vinden zodat als ik op E druk dat gechecked kan worden op de player dichtbij een item staat. Dit gaat niet normaal want de inputmanager neemt enkel commands die maar 1 gameobject hebben en deze zou er 2 moeten hebben voor zowel de player als de world. Dus mss toevoegen dat je commands kan toevoegen aan de inputmanager die 2 gameobjects pakken als argument? DONE

- Nu de InventoryComponent toevoegen. Deze heeft een vector van 10 items.

- De items geraken in de inventory. Nu moet de player de items nog kunnen gebruiken.

- Als je op een number key drukt, dan wordt de activeitem in de inventorycomponent de item dat op die idx in de vector zit.

- Als je op spacebar drukt, wordt de activeitem gebruikt. Elke item heeft dus een OnUse method nodig. Deze wordt gecalled met het player gameobject als argument. Als je op space drukt, wordt de UseItemCommand geëxecute. Deze gaat de OnUse method callen van de InventoryComponent.

17/07:
- Let's improve the inventory some more today. When you reach the max capacity of items in your inventory and you try to pick up another item, it gets removed from the world's item container.

- Eerst wil ik aanpassen dat je ook de filepath naar de texture van een item in de txt file kan steken zodat dat ook geparsed kan worden.

- Nu wil toevoegen dat je met de active key enemies kan attacken.

- Als we dus voor een enemy staan en we drukken op spatie, dan moet een command geëxecute worden dat het actieve weapon gebruikt. Deze method gaat eerst checken wat het type van het actieve item is. Als deze een melee key is dan gaat deze command de OnUse method callen van de actieve item met als argument de dichtstbijzijnde enemy binnen een bepaalde range, als die er is.

NOTES VOOR VOLGENDE KEER:
- Dus nu als je een enemy attacked met een melee key, dan wordt er een debug method van de closest enemy gecalled dat die debug deactivate. Dit moet je nog aanpassen door de health van de enemy aan te passen obv de weapon met hun HealthComponent (dus in de OnUse method van dat wapen).

- Ook moet je nog nadenken over hoe je de cooldown wilt toevoegen. Dit ook in de useitemcommand steken of eerder in een combatcomponent?
	-> De cooldown gewoon in de MeleeKeyComponent activaten op 
	einde van de OnUse method en in de Update method hiervan
	de cooldown updaten.

- De virtual OnUse method van de items heeft nu 2 argumenten, een player en een enemy. Het enemy argument is enkel voor meleekeys momenteel. Dus als je een consumable gebruikt bv, dan geef je nullptr mee als argument voor die parameter. Als je een rangedKey zou gebruiken, dan moet er een projectile afgeschoten worden dus dat gaat wss op een andere manier werken.

TODO DUS: HealthComponent toevoegen voor zowel enemies als voor player. Combat van player's kant naar enemy verbeteren (Cooldown toevoegen, damage van key toevoegen, proc toevoegen,..), combat van enemies' kant naar player toevoegen (Enemies dus een CombatComponent geven? Wat zou hier dan in moeten?). Nadenken over wat je nog allemaal moet toevoegen hierbij. DENK EERST GOED NA OVER IMPLEMENTATIE!! -> Schrijf alles op, teken alles uit! Denk lang en geduldig na!

18/07:
- We gaan er eerst voor zorgen dat de enemy die attacked kan worden, de nearest enemy VOOR de player is en niet in alle richtingen.

- Dus op basis van de laatste richting waar de speler zich in bevond, dus de huidige richting waar de speler zich in bevindt, moet de dichtstbijzijnde enemy berekend worden.

- Je zou dus een method moeten hebben die de laatste richting returned waar de player zich in verkeerde. Misschien een extra enum class maken waar je alle richtingen in kan steken en dan een extra data member maken waar je de last direction in bijhoudt? OF gewoon een method in de SpriteRenderComponent steken die de direction returned want die werkt met alle directions in 1 enum.

- Ook heb ik een bug gevonden dat de room linksonderaan geen enemies spawned, waarschijnlijk omdat zogezegd de eerste room is in de grid, ook al is dit niet altijd de starting room.

- Deze bug gebeurt denk ik omdat de eerste current room die aan de enemymanager gegeven wordt degene is na de eerste effectieve room omdat eerst de room gegenerate wordt, dan de volgende room geset wordt als nieuwe current room voor de volgende frame en DAN pas de enemymanager aan beurt is. Dus er zou een manier moeten zijn om de eerste room ook te vullen met enemies. -> Voor nu laat ik dit gewoon zoals het is. De links onderste room is dus nooit gevuld met enemies, we zullen dit voorlopig een feature laten. Uiteindelijk kan ik van deze room ook een vendor room maken dus is het goed dat er geen enemies in deze room zitten.

- Het volgende is de enemies elks een HealthComponent geven. Deze heeft een subtracthealth method en een addhealth method. Ook heeft deze een IsDead method. Als de player een enemy raakt, wordt er health van die enemy afgetrokken. In de EnemyManager wordt gechecked of de IsDead method van een enemy true returned, zo ja wordt deze gedeactiveerd en uit de m_Enemies container gehaald.

- Wat heeft een healthcomponent nodig?
-> int m_Health.
-> methods: SubtractHealth, AddHealth, IsDead.

- In de Clone method van de EnemyComponent moet je dus nog een HealthComponent toevoegen met als argument m_Health van de EnemyComponent.

- Als een enemy attacked wordt door een weapon met een bepaalde proc moet die proc getriggered worden als die actief is. Ik was aan het denken om een FireProc de enemy voor een bepaalde duratie in brand te steken. De HealthComponent dus misschien een ptr naar een Proc geven en als de proc actief is die setten op de proc van het type van de weapon voor een bepaalde duratie? En alle procs dus een data member geven dat de duratie van die proc voorstelt. Bv een fireproc een duratie van 4 seconden geven zodat de enemy 4 seconden lang brandt. Een critproc een duratie van 1 seconde geven zodat die proc maar 1 keer wordt toegepast op de enemy's health als die zou activeren.

- Dus stel: Je attacked een enemy en je fireproc activeert. Dan wordt in de OnUse method van je key eerst de health geadd obv de damage van de key en de modifier van de quality. Daarna wordt een method van de HC gecalled dat de proc set. Als de proc binnen de HC dus niet nullptr is, wordt de Trigger method ervan gecalled in de Update method van de HC met als argument de health van de enemy.

- Bug: Als je een key oppakt, wordt zijn Update method niet meer gecalled. DIT IS OMDAT DIE GEDEACTIVATE WORDT ALS JE DIE OPPAKT!!

- Mogelijke fixes: Niet deactivaten, maar niet meer renderen. OF alle items die in de inventory zitten gewoon in de inventorycomponent updaten? Ik heb de tweede optie gekozen. Nu update ik alle items hun itemcomponent polymorfisch in de inventorycomponent. Zo worden ze van zodra ze in de inventory zitten automatisch daar geupdate ipv rechtstreeks in de scene.

- Nu wil ik een knockback toevoegen als je de enemy raakt. Deze mag altijd hetzelfde blijven. Het enige nut hiervan is eigenlijk dat je kan voorkomen dat een enemy je raakt door die zelf eerst te raken. Zo kan de enemy niet in range komen om jou te raken.

19/07:
- Vandaag wil ik de combat van de enemy naar de player toevoegen. De enemy kan de player damagen obv zijn m_Power data member. Als de hitbox van de player en de enemy overlappen, kan de enemy attacken en wordt er ook een knockback effect op de player toegepast.

- We moeten de player dus een HealthComponent geven en de enemy een CombatComponent. In deze CombatComponent gaat gechecked worden of hun hitboxes overlappen en zo ja wordt de damage die de enemy kan doen op de player's HealthComponent toegepast.

- We gaan de CombatComponent dus een CheckCollision method geven die checked of de hitboxes overlappen. Als dit het geval is returned die method true, anders false. Als deze true returned, wordt er een Attack method gecalled die health van de HC van de player gaat aftrekken obv de damage die de enemy kan verrichten. Dan gaat er ook een knockback effect op de player toegepast worden.

- Het volgende dat je moet toevoegen is een full game reset als de player doodgaat.

- De player een ResetComponent geven. Deze checked de HC van de player. Als de player dood is, gaat deze een method callen van de SceneManager met als argument een fcn pointer naar de Initialize method van de Game. Deze method in de SceneManager gaat die fcn ptr assignen aan een data member. Aan het begin van de volgende update gaat de SceneManager eerst checken of die fcn ptr niet nullptr is. Als die idd niet nullptr is, haalt die alle scenes leeg en called die die method en zet die fcn ptr dan op nullptr.

- Of met een command doen? Als de player dus dood is, gaat de ResetComponent een resetcommand executen. Deze gaat een method van de SceneManager callen die alle scenes marked for deletion en daarna een method callen die Reset heet en de fcn ptr als argument neemt en in de volgende frame checked de SceneManager dus of die niet nullptr is en als dat idd niet zo is dan called die die method.

TODO:
- RangedKeys
- Consumables
- Shop
- Economy
- Collision met muren
- Collision met obstacles
- Muren toevoegen
- Bosses toevoegen
- Sounds
- HUD
- Attack animations
- Stats: Alle info bijhouden over hoeveelheid kills, bosses defeated, rooms visited, worlds cleared, time alive. Mss een singleton statmanager maken die alle stats bijhoudt en wegschrijft naar file?
- Meer enemies toevoegen
- Meer items toevoegen
- Weapon levels toevoegen
- Reforging toevoegen

23/07:

- Waar heb ik vandaag zin in? Ik wil loot toevoegen die dropped van enemies, dus ofwel health voor de player, ofwel centjes voor de vendor. Maar ik wil ook aan de ranged keys beginnen.

- Loot drops staan al ingepland voor andere dagen dus vandaag ga ik de ranged keys toevoegen.

- Ranged key items moeten ook van een file geparsed worden. Dit gebeurt in hetzelfde formaat als de melee keys. De cooldown is dan gewoon de tijd die als pauze dient tussen dat je projectiles kan afschieten zodat je niet kan spammen.

- Het enige verschil tussen melee en ranged keys zijn dus dat je met ranged keys projectiles kan afschieten en that's it. Ranged keys hebben ook damage, cooldown, quality en een eventuele proc.

- Om een ranged key projectiles te laten afschieten, geven we die nog een extra component.

- De ProjectileComponent van een ranged key moet bij het gebruik van die key een projectile aanmaken en afschieten. Als de projectile een enemy aanraakt, moet er damage toegepast worden op de enemy's HealthComponent en moet de projectile verdwijnen.

- De projectile moet wanneer die afgeschoten wordt de positie meekrijgen van de player.

- Ik kan nu maar 1 projectiel afschieten.

- BUG: Als je een projectiel afschiet en je gaat dan naar een andere kamer, dan komt dat projectiel mee. Als je van kamer verandert terwijl er een projectiel actief is, moet dat projectiel verwijderd worden.

- Ik moet dus een manier vinden om in de InventoryComponent te checken of er van room veranderd is zodat ik dat projectiel dan kan verwijderen. DONE. Ik heb het world gameobject meegegeven als argument aan de InventoryComponent van de player. Niet de meest ideale oplossing, maar ik ga deze hier uiteindelijk toch nog nodig hebben om collision tussen enemies en projectiles te checken.

- Het volgende dat ik moet toevoegen is collision tussen enemies en projectiles.

- Het eerste dat ik nu nog ga doen is een extra argument toevoegen aan de textfile voor ranged keys wat de snelheid van de projectile voorstelt.

- Collision tussen projectile en enemies:
-> Waar moet dit gebeuren?
-> Moeten de enemies de collision checken of de projectile zelf?

- Best de projectile zelf gewoon collision laten checken met alle enemies die in de huidige room zitten.

- Waar checken we dit voor de projectile? Misschien in de InventoryComponent aangezien dat die zowel de world als de player heeft?

- Ik zou eigenlijk collision willen checken in de ProjectileComponent, daar houdt dat het meeste steek. Maar om dat te kunnen doen hebben we in de ProjectileComponent alle enemies in de huidige room nodig. Mss een vector van enemies bijhouden en in de shoot method deze meegeven als argument?

- In de RangedKeyComponent hebben we dus ook de enemies nodig van de huidige room om die door te kunnen geven naar de ProjectileComponent. In de OnUse method de world gameobject meegeven ipv de closest enemy?

25/07:
- Ik heb de behavior van de enemy aangepast zodat die eerst wandered totdat de player binnen een bepaalde range van de enemy komt.

- Ik heb ook de movement component van de player aangepast zodat de player niet buiten de window boundaries kan lopen.

4/08:
- Vandaag wil ik obstacles toevoegen.

- Het nut van een obstacle is om de player's weg naar een treasure room te blokkeren en om de rooms wat voller te maken.

- Obstacles kunnen breakable of non-breakable zijn.

- Treasure rooms met maar 1 doorgang moeten geblokkeerd worden door breakable obstacles.

- Breakable obstacles moeten een healthcomponent hebben.

- Breakable obstacles moeten ook een bepaald percentage hebben om geld te droppen.

- Obstacles die de room opvullen moeten in een bepaald patroon gezet worden, bv 4 obstacles in elke hoek van de room of 5 obstacles in een plus vorm in het midden van de room.

- Als je een obstacle breekt met een wapen moet dat wapen kapotgaan en dus uit de inventory van de player verwijderd worden. Op deze manier moet de player de keuze maken of die wel effectief een wapen wilt wasten aan een obstacle om door te geraken.

- Ik wil dus: een obstacle maken, een obstaclemanager maken voor de world die de obstacles plaatst in een bepaald patroon en ook obstacles plaatst voor treasure rooms met maar 1 doorgang.

- Ik ga de obstacles spawnen nadat world generation complete is want pas daarna zijn de types van alle rooms volledig correct. Anders zou ik niet op een correcte manier obstacles voor deuren naar treasure rooms met maar 1 doorgang kunnen zetten.

- Als je een room binnengaat, moeten de neighbors van die room gechecked worden om te zien of die een treasure room is. Als een van de neighbors een treasure room is en maar 1 doorgang heeft, moet de ingang naar deze treasure room geblokkeerd zijn met breakable obstacles.

- Nadat dit is gebeurd moeten er random obstacles in de room geplaatst worden om de rooms op te vullen.

- Voeg obstacles toe aan de wereld op dezelfde manier dat je items toevoegt aan de wereld. Je houdt dus een map bij met als key een Room pointer en als value een vector van shared pointers naar gameobjects wat de obstacles voorstelt.

- Je houdt ook een Room* bij voor de current room.

- Hoe gaan we obstacles toevoegen aan een room: We checken eerst of de maze generation al klaar is. Dan checken we of de huidige room al obstacles heeft in de map of niet. Dan gaan we de neighbors van de huidige room checken om te zien of die een treasure room als neighbor heeft.

- Een obstaclecomponent moet een aantal argumenten hebben in de cstr: bool isDestructible, const Point2f& pos.

- Op basis van de richtingen van de treasure rooms moeten er obstacles geplaatst worden.

- Maak een SpawnTreasureObstacles method. Deze gaat loopen over de m_ObstacleDirections vector en voor elke richting gaat die daar obstacles spawnen.

- De obstacles spawnen nu correct. Nu moet ik er nog collision aan toevoegen. De player en enemies mogen niet door obstacles kunnen lopen. Er moet dus ergens gechecked worden of hun hitboxes overlappen. Dit kan in de playermovementcomponent en enemymovementcomponent.

- Misschien ervoor zorgen dat de player en de enemies een bool flag hebben die aanduidt dat ze ergens tegen staan. Deze activeren als de hitboxes van een obstacle en van de player/enemy overlappen en dan moet gechecked worden.. Maar dit gaat niet lukken want de richting vanwaar ze tegen de obstacle lopen moet ook bekend zijn om te kunnen bepalen naar welke richtingen ze dan WEL kunnen lopen.

- Als de player of een enemy tegen een boulder loopt, misschien dan die entity's positie verplaatsen met zijn negatieve velocity op dat moment? Dan wordt die entity wat naar achter geschoven zodat die eigenlijk niet door de boulder kan lopen.

- Of als een entity tegen een boulder loopt wordt er een bool flag op true gezet en de direction waarin die entity in verkeerde toen die tegen de boulder liep wordt ook opgeslagen. Als die bool dan nog true is en die entity blijft in die richting proberen lopen dan kan die niet meer bewegen. Die entity moet dus van richting veranderen om terug te kunnen bewegen.

- Betere oplossing voor collision met boulders: Als de player's huidige richting in de richting van een boulder is en die overlappen al, dan moet de movement van de player gecancelled worden.

- Nu worden de richtingen in een vector gestoken zodat voor elke obstacle de collisiondata opgeslagen wordt in de player's movementcomp.

TODO:
- Obstacle een HC geven. DONE
- Obstacle collision met enemies implementeren. DONE
- Deuren aflsuiten totdat alle enemies in die room dood zijn.
- Bosses toevoegen.

11/08:
- Vandaag ga ik aan de eerste boss beginnen van de game.

- Eerst moet ik ervoor zorgen dat als de player een room ingaat, de deuren van deze room gesloten blijven tot dat alle enemies dood zijn.

- Voordat ik dat kan doen moet ik ervoor zorgen dat er een random melee of ranged item spawned in de starter room zodat de player altijd een wapen heeft om mee te vechten.

- BUG: Als je van een treasure room die geblocked was met boulders terug naar de andere room wilt gaan, dan wordt je soms automatisch teruggeduwd in de treasure room. Gefikst door de positie van de player aan te passen als die in een kamer komt.

- Nu wil ik eerst een LootComponent toevoegen. Deze kan ik aan enemies en bosses geven. Hier geef je een lijst items mee met het droppercentage. Bv voor gewone enemies 20% geld, 20% health potion, 60% niks.

- Je killed dus een enemy en de kan ofwel geld, een health potion, of niks droppen. Als een enemy sterft, gaat de LootComponent eerst een random percentage berekenen. Dan gaat die zien in welke range dit percentage valt om het item dat erbij hoort te kiezen. Bv, 20% kans op geld, 20% kans op health potion en 60% kans op niks. De eerste 0-19 is dus geld, 20-39 is health potion en 40-100 is niks.

Update(...)
{
	if(!obj.GetComponent<HealthComponent>()->IsDead())
		return;

	m_SpawnPos = obj.GetComponent<MovementComponent>()
		->GetPosition();

	randNr = rand() % 101;
	DetermineItem(randNr);
}

DetermineItem(int randNr)
{
	for(auto& loot : m_Loot)
	{
		if(randNr <= loot.first)
		{
			m_pSpawnedItem = loot.second
				->GetComponent
				<ItemComponent>()->Clone();
			break;
		}
	}
	m_pSpawnedItem->GetComponent<TransformComponent>()
		->SetPosition(m_SpawnPos);
}

void AddItem(int dropRate, std::shared_ptr<ItemComponent> item)
{
	m_Loot.push_back(std::make_pair(dropRate, item));
}

- PROBLEEM: Er kan momenteel niet meer dan 1 item gespawned worden per room omdat de ItemManagerComponent een map van een Room* als key en als value een shared ptr naar het item bijhoudt en geen container van items per room. Dus ofwel ga ik alle code aanpassen hiervan, ofwel ga ik ervoor zorgen dat enemies enkel items kunnen droppen als er geen andere items in de room zijn.

14/08:
- Nieuwe "item" toevoegen om een economy te kunnen voorzien. Wat voor item moet dit zijn: coin, banknote, gold, silver, soul, scrap, gold nugget, ..

15/08:
- Je moet dus aan de LootComponent een coin meegeven zodat een enemy 20% kans heeft om een coin te droppen.

- Waar moeten de coins worden bijgehouden? In de InventoryComponent? In principe moet er gewoon een int value bijgehouden worden. Dus als een coin opgepakt wordt, moet dat niet aan de inventory zelf toegevoegd worden als concrete item, maar er moet gewoon een int value geïncrementeerd worden.

- Een CoinComponent maken? Deze inherit van ItemComponent. De OnUse method ervan moet leeg zijn want je kan een coin niet rechtstreeks gebruiken. De Clone method wordt gebruikt zoals de andere items om de coin te spawnen in de wereld. Als de player de coin dan oppakt dan moet er in de PickUpItemCommand's Execute method gechecked worden of het item een Coin is of niet. Zo ja, dan wordt er via de InventoryComponent een method gecalled om de hoeveelheid currency te adden en dan wordt de coin removed uit de ItemManagerComponent.

- BUG: Je kan enemies nog uit de map attacken.

16/08:
- Bug fiksen dat je enemies niet meer door muren/obstacles kan duwen.

- Vendor room + vendor toevoegen.

- Maak van een random room in de wereld een vendor room. Deze vendor room moet een vendor bevatten die 3 random items verkoopt aan prijzen die relatief zijn aan het item en de item kwaliteit.

- Visual bug fiksen: ALLE sprites sorteren obv hun y-waarde. Dus hetzelfde zoals bij de enemies, maar dan met letterlijk ALLE sprites. DONE

- In een vendor room moeten 3 random items liggen met de prijs in coins eronder aangeduidt. Jij kan dan, als je het geld hebt, die items kopen. Je komt een vendor room binnen en als je daar een item oppakt, dan wordt de prijs van dat item van jouw hoeveelheid coins afgetrokken.

- Deze items op de juiste plaats laten zetten in de ItemManager? Items ook als data m_Price geven zodat je kan checken of de player genoeg coins heeft om te kopen? En voor items die normaal spawnen dan de prijs 0 maken?

- Ok dus nu worden items al gechecked obv hun prijs als ze in een vendor room liggen. Nu wil ik dat er 3 random items spawnen in een vendor room en dat die naast elkaar liggen.

- BUG: Vanaf dat er meer dan 1 doorgang is naar een treasure room met maar 1 doorgang, wordt er maar 1 treasure room geblocked met obstacles, de rest dus niet.

19/08:
- BUG: Enemies kunnen nog door obstacles lopen.

- Ik wil dat als een enemy tegen een obstacle loopt, dat diens velocity vector aangepast wordt door wrijving door de obstacle. Dus dat de enemy eigenlijk rond de obstacle loopt om de player te bereiken.

- Dus als een enemy tegen een obstacle loopt, dan moet ofwel zijn x- ofwel zijn y-waarde op 0 gezet worden zodat die nog maar in 1 richting eigenlijk "sleept" tegen de obstacle, zo geraakt die errond. Hoe berekenen we welke waarde we op 0 moeten zetten? Als de obstacle rechts of links van hem is, moet die op of neer gaan, dus x wordt op 0 gezet. Als de obstacle onder of boven hem is, moet die links of rechts gaan, dus y wordt op 0 gezet.

if(atan2(velocity.y, velocity.x) < 0.78 &&
atan2(velocity.y, velocity.x) > -0.78) => Op of neer gaan
{
	velocity.x = 0.f;
{
else if(atan2(velocity.y, velocity.x) > 2.35 &&
atan2(velocity.y, velocity.x) < -2.35) => Op of neer gaan
{
	velocity.x = 0.f;
{
else if(atan2(velocity.y, velocity.x) > 0.78 &&
atan2(velocity.y, velocity.x) < 2.35) => Links of rechts gaan
{
	velocity.y = 0.f;
}
else if(atan2(velocity.y, velocity.x) > -2.35 &&
atan2(velocity.y, velocity.x) < -0.78) => Links of rechts gaan
{
	velocity.y = 0.f;
}

- Misschien een soort van evade toevoegen? Zodat als een enemy een obstacle ziet, dat die errond beweegt.

24/08:
- Vandaag wil ik stats toevoegen. Alles dat dus bijdraagt tot de progressie van het spel als roguelike moet opgeslagen worden. Dingen zoals: hoeveelheid enemies killed, hoeveelheid coins in totaal verzameld, hoeveel items opgepakt, kamers ontdekt..

- Waar wil ik deze StatManager steken? In het world game object?

- De StatManager gaat globaal toegankelijk moeten zijn, want die moet getriggered kunnen worden door verschillende soorten events, zoals een enemy killen, een coin oppakken, een nieuwe room ontdekken,.. Dus van de StatManager een Singleton maken?

- Wil ik van de StatManager een component maken die vasthangt aan de world? Of wil ik van de StatManager een standalone class maken die geen component is en niet vasthangt aan de world? Het laatste lijkt me misschien logischer omdat het niet per see MOET vasthangen aan het world GameObject omdat de world een momentopname is. World is de huidige wereld en ik wil net dat de StatManager ook data bevat van de player's beste run en dus diens high score/beste stats.

- Dus mss een aggregate struct maken in de StatManager file die alle data over stats bevat zoals:

struct Stats
{
	int itemsFound{};
	int enemiesKilled{};
	int roomsDiscovered{};
	float timeSurvived{};
}

class StatManager final : public Singleton<StatManager>
{
	...
private:
	Stats m_CurrentRun;
	Stats m_BestRun;
	Stats m_TotalStats;
}

- Welke methods moet de StatManager voorzien? Er moet globaal data aangepast kunnen worden aan de StatManager. 